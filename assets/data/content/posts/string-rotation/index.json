{"hash":"7908048cbc7b00eaca5af26cea1924a1b32bd3cb","data":{"metadata":{"siteName":"Yapingy","siteDescription":"ideas, experiences, thoughts"},"post":{"id":"62a189dd2c140b77599f84f5bce9b1ba","title":"String matrix","content":"<blockquote>\n<p>Assume you have a method <em>include</em> which checks if one word is a substring of another. Given two strings, <em>s1</em> and <em>s2</em>,\nwrite code to check if <em>s2</em> is a rotation of <em>s1</em> using only one call to <em>include</em> (e.g., \"<em>waterbottle</em>\" is a rotation of \"<em>erbottlewat</em>\").</p>\n</blockquote>\n<h2 id=\"understanding-the-problem\"><a href=\"#understanding-the-problem\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Understanding the problem</h2>\n<p>When you rotate the string <em>s1</em> to form a new string <em>s2</em>, you are basically cutting it into two parts, <em>x</em> and <em>y</em>, and rearranging them to be <em>yx</em>. If you duplicate <em>s1</em> and concatenate it with itself, you are getting a string <em>xyxy</em> that includes <em>yx</em> as its substring. String Rotation does not change the total length of the string, therefore we need to check if <em>s1</em> and <em>s2</em> are the same length. At the same time, we need to validate that their lengths do not equal 0. After length validation, we can concatenate <em>s1</em> with its duplicate and use <code class=\"language-text\">include()</code> to see if <em>s2</em> is part of <em>s1</em>. If true, <em>s2</em> is a rotation of <em>s1</em>.</p>\n<h3 id=\"solution-in-javascript\"><a href=\"#solution-in-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Solution in JavaScript</h3>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isRotation</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s1<span class=\"token punctuation\">,</span> s2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> length <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">===</span> s2<span class=\"token punctuation\">.</span><span class=\"token property-access\">length</span> <span class=\"token operator\">&amp;&amp;</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> s1s1 <span class=\"token operator\">=</span> s1 <span class=\"token operator\">+</span> s1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s1s1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">include</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n","date":"11 May 2020","timeToRead":1}},"context":{}}